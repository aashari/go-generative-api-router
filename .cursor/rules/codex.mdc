---
description: 
globs: 
alwaysApply: true
---
# Codex Integration Guide

This guide explains how to use Codex as an AI-powered development assistant for the Generative API Router project.

> **Development Workflow**: For general development practices, see [Development Guide](mdc:development_guide.mdc)  
> **Testing & Running**: For setup and testing instructions, see [Running and Testing Guide](mdc:running_and_testing.mdc)

## Table of Contents

- [Purpose & Overview](mdc:#purpose--overview) - Why and how to use Codex
- [Project-Specific Context](mdc:#project-specific-context) - Generative API Router details
- [Codex Workflow](mdc:#codex-workflow) - Step-by-step usage instructions
- [Query Composition](mdc:#query-composition) - How to write effective queries
- [Examples](mdc:#examples) - Practical query examples
- [Quality Checklist](mdc:#quality-checklist) - Pre-submission verification

---

## Purpose & Overview

**Purpose:**
Whenever you need to plan, design, review, or implement changes, Codex is your critical peer—serving as planner, reviewer, and software architect. Use Codex not just as a tool executor, but as an expert collaborator whose feedback, verification, and judgment you must actively seek and enforce.

---

## Project-Specific Context: Generative API Router

When working with the Generative API Router project, include this context in your queries to Codex:

* **Project Overview**: A Go microservice that proxies OpenAI-compatible API calls to multiple LLM vendors (OpenAI, Gemini) with configurable selection strategies
* **Key Structure**: 
  * Configs in `configs/` directory
  * Docker files in `deployments/docker/`
  * Documentation in `docs/` with subdirectories for api, development, and user guides
  * Examples in `examples/` with curl scripts and client libraries
  * Makefile for build automation
* **Security Considerations**: 
  * `scripts/deploy.sh` contains sensitive AWS infrastructure data and is gitignored
  * Always scan for AWS account IDs, access keys, and other credentials before committing
* **Testing Requirements**: 
  * Service must maintain transparent proxy behavior (original model name preserved in responses)
  * Always wait for service initialization before testing
  * Use Makefile commands for consistency

---

## Codex Workflow

### 1. Always Interact via Single-Line Command

```bash
GENAPI_API_KEY=HaloHaloBandung codex -p genapi -q "{your query}" | cat
```

* *Note: Your query must be a single line. Multi-line input will cause errors.*

### 2. Query Composition

Your query to Codex **must always** include:

* **Full context:**

  * Project background and intent
  * Current state and all relevant constraints
  * Goals and specific acceptance criteria

* **Explicit task or question:**

  * What you want Codex to plan, review, or verify
  * The scope (files, components, features, etc.)

* **Verification requirements:**

  * Require Codex to *never trust or assume*—it must independently verify claims, changes, or plans.
  * Instruct Codex to check file changes, review code, and always run linter, build, and all relevant tests after any modification.
  * Demand Codex explicitly *report its findings*—success or failure, with details.

* **Quality standards:**

  * Codex must enforce DRY (Don't Repeat Yourself), clean code, clarity, modularity, and industry best practices at every step.
  * Require Codex to proactively flag code smells, duplication, unclear logic, or maintainability concerns—even if requirements appear satisfied.
  * Tell Codex to suggest improvements or refactorings for code quality, maintainability, and robustness.

* **Critical mindset:**

  * Codex should challenge assumptions, highlight ambiguous or incomplete requirements, and document any risks or uncertainties.
  * Instruct Codex to halt and ask for missing information if verification is blocked; it must never proceed blindly or declare completion based on unverified assumptions.

* **Never-ending verification loop:**

  * Codex must *not* declare any work complete until all checks pass and the solution meets quality standards.
  * If any issues or test failures arise, Codex should clearly state next actions, repeat verification after each correction, and only exit this loop when everything is fully and independently validated.

---

## Examples

Suppose you want Codex to implement and verify a secure user authentication API. Your query should be:

```
Design and implement a secure REST API endpoint for user authentication in Node.js with Express and JWT. The endpoint must handle login, password validation, and return a signed token on success. After implementation, check all file changes, run lint, build, and all tests. Enforce DRY and clean code principles. If any errors, test failures, code duplication, or maintainability issues are found, report them and propose improvements. Do not declare work complete until all issues are resolved, all verifications pass, and the solution meets high code quality standards.
```

**Example for Generative API Router**:

```
Review the proxy implementation in internal/proxy/ directory for the generative-api-router project. Verify that the proxy maintains transparent behavior where the original model name from client requests is preserved in responses while routing to actual vendor models. Check for proper error handling, streaming support, and tool calling functionality. Run make test and make lint to verify code quality. Report any issues with the transparent proxy behavior or code quality concerns.
```

---

## Quality Checklist

* [ ] Have I included all relevant project context, goals, and constraints?
* [ ] Did I specify exactly what Codex should plan, review, or verify?
* [ ] Did I instruct Codex to independently check diffs, run tests, and *not* trust prior results?
* [ ] Did I make it clear Codex must enforce DRY, clean code, and suggest improvements?
* [ ] Did I require Codex to document uncertainties and ask for missing info if verification is blocked?
* [ ] Did I require Codex to loop, never declaring completion until *everything* is fully checked and passes?
* [ ] For generative-api-router: Did I mention the transparent proxy requirement and Makefile usage?

### Expected Output Quality

* Codex is to respond with direct, detailed, and constructive feedback—never shallow approval.
* Expect Codex to surface edge cases, ambiguities, and make actionable recommendations for improvement.
* Every output from Codex should clearly state what was checked, what passed/failed, and what to do next.

---

## **In Short**

Treat Codex as a highly critical, detail-oriented peer. Demand that it plans, reviews, verifies, and enforces best practices end-to-end. Codex's approval is *never* based on assumption—only on complete, independently-verified evidence.
